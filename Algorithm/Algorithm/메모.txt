
// 선형 자료구조

배열 vs 동적 배열(vector) vs 연결 리스트(list)

배열 :		- 사용할 방 개수를 고정해서 계약 (절대 변경 불가)
			- 연속된 방으로 배정 받아 사용
			장점 : 연속된 방
			단점 : 방을 추가 / 축소 불가

동적배열 :	- 사용할 방 개수를 유동적으로 계약
			- 연속된 방으로 배정 받아서 사용
			이사 비용 (할당받은 방 이상으로 추가하려면 단체로 이동해야 하기 때문에 비용 발생)
			그래서 메모리 할당 정책 : 실제로 사용할 방보다 많이 여유분을 가지고 예약(약 1.5배) <- 이사 횟수를 최소화
			장점 : 유동적인 계약(방 여유분 추가 예약)
			단점 : 중간 삽입 삭제(배열 자체의 문제 중간에 삽입하면 뒤로 밀어야함)

연결리스트 : - 연속되지 않는 방을 사용
			장점 : 중간 삽입 / 삭제 이점
			단점 : n번째 방을 바로 찾을 수가 없음 == 임의 접근이 불가능(인덱스)



// 비선형 자료구조

그래프 :		- 연결관계 표현 정점(Vertex)과 간선(Edge)
			- 도로교통망, 소셜 네트워크 관계도 (1 : 1이 아니라 다수와 연결)
			- 가중치 그래프 : 연결관계 + 간선의 가중치 ( ex) 지하철 노선도에서의 간선에 거리별로 가중치를 둠 )
			- 방향 그래프 : 간선에 방향이 있는 그래프


DFS(깊이 우선 탐색) * 탐색 : 모든 데이터 순차로 도는 것
			- 길이 있으면 끝까지 들어감 

BFS(너비 우선 탐색) 
			- 입구를 기준으로 가까운 것부터 돌려고 함 
			- 큐로 예약시스템(방문 해야할 곳을 큐에 넣어둠)


트리 : 계층적 구조를 갖는 데이터를 표현하기 위한 자료구조